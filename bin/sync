#!/usr/bin/env node

var args = process.argv.slice(2)

var { syncCleanInvalidate } = require('../lib/')
const error = require('debug')('error:s3-sync')

if (args.length < 2) {
  console.error('Usage: s3-sync [source] [bucket] [--cleanup] [--filter=filter] [--limit=concurrency limit] [--accessKeyId=AWS access key] [--secretAccessKey=Secret AWS access key] --region=[region] --cloudFrontId=[CloudFront Distribution ID] [--stoponerr] [--quiet] --verbose')
  process.exit(1)
}

// parse arguments the hard way
function startsWith (str, prefix) {
  return str.substr(0, prefix.length) === prefix
}

var options = { aws: {} }
let verbose = false

args.forEach(function (arg) {
  if (startsWith(arg, '--limit=')) {
    options.limit = parseInt(arg.split('=', 2)[1], 10)
  }
  if (startsWith(arg, '--filter=')) {
    options.filter = new RegExp(arg.split('=', 2)[1])
  }
  if (startsWith(arg, '--accessKeyId=')) {
    options.aws.accessKeyId = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--secretAccessKey=')) {
    options.aws.secretAccessKey = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--region=')) {
    options.aws.region = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--cloudFrontId=')) {
    options.cloudFrontId = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--stoponerr')) {
    options.stopOnErr = true
  }
  if (startsWith(arg, '--cleanup')) {
    options.cleanup = true
  }
  if (startsWith(arg, '--verbose')) {
    verbose = true
  }
  if (startsWith(arg, '--quiet')) {
    options.quiet = true
  }
  if (startsWith(arg, '--public')) {
    options.publicRead = true
  }
})
if (verbose) {
  process.env.DEBUG = 'trace:*'
} else {
  process.env.DEBUG = process.env.DEBUG || 'error:*'
}

const source = args[0]
const bucket = args[1]

syncCleanInvalidate(source, bucket).catch((e) => { error(e.stack || e.message || e) })
