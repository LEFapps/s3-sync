#!/usr/bin/env node

var args = process.argv.slice(2)

const { promisify } = require('util')
var { syncS3, cleanupS3, invalidateCloudFront } = require('../lib/')

if (args.length < 2) {
  console.error('Usage: s3-sync [source] [bucket] [--cleanup] [--filter=filter] [--limit=concurrency limit] [--accessKeyId=AWS access key] [--secretAccessKey=Secret AWS access key] --region=[region] --cloudFrontId=[CloudFront Distribution ID] [--stoponerr] [--quiet]')
  process.exit(1)
}

// parse arguments the hard way
function startsWith (str, prefix) {
  return str.substr(0, prefix.length) === prefix
}

var options = { aws: {} }
args.forEach(function (arg) {
  if (startsWith(arg, '--limit=')) {
    options.limit = parseInt(arg.split('=', 2)[1], 10)
  }
  if (startsWith(arg, '--filter=')) {
    options.filter = new RegExp(arg.split('=', 2)[1])
  }
  if (startsWith(arg, '--accessKeyId=')) {
    options.aws.accessKeyId = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--secretAccessKey=')) {
    options.aws.secretAccessKey = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--region=')) {
    options.aws.region = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--cloudFrontId=')) {
    options.cloudFrontId = arg.split('=', 2)[1]
  }
  if (startsWith(arg, '--stoponerr')) {
    options.stopOnErr = true
  }
  if (startsWith(arg, '--cleanup')) {
    options.cleanup = true
  }
  if (startsWith(arg, '--quiet')) {
    options.quiet = true
  }
  if (startsWith(arg, '--public')) {
    options.publicRead = true
  }
})

async function run () {
  const paths = await promisify(syncS3)(args[0], args[1], options)
  if (Array.isArray(paths.changed) && paths.changed.length > 0) {
    console.log('Updated files:')
    paths.changed.forEach((path) => {
      console.log(path)
    })
  }
  console.log(JSON.stringify(paths, 2))
  let changed = paths.changed
  if (options.cleanup) {
    changed = await cleanupS3(args[1], paths.changed.concat(paths.skipped), options)
  }
  if (options.cloudFrontId) {
    const url = await invalidateCloudFront(options.cloudFrontId, changed, options)
    console.log('CloudFront location:')
    console.log(url)
  }
}

run().catch((e) => { console.error(e.stack || e.message || e) })
